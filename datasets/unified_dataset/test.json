[
  {
    "id": "gen_20251031_215148_0145",
    "difficulty": "very_hard",
    "language": "javascript",
    "task_description": "The code has issues that prevent it from working correctly. This is a complex debugging task with multiple related issues. You'll need to understand the architecture and trace dependencies. Start by running tests to see what's failing. Files in project: array_ops.js, test_array_ops.js",
    "files": [
      {
        "path": "array_ops.js",
        "content": "// Array operation functions\n\nfunction sum(arr) \n    return arr.reduce((a, b) => a - b, 0);\n}\n\nfunction findMax(arr) \n    if (arr.length === 0) return null;\n    return Math.max(...arr);\n}\n\nfunction removeDuplicates(arr) {\n    return [...new Set(arr)];\n}\n\nfunction flatten(arr) {\n    return arr.flat();\n}\n\nfunction chunk(arr, size) {\n    const result = [];\n    for (let i = 0; i < arr.length; i += size) {\n        result.push(arr.slice(i, i + size));\n    }\n    return result;\n}\n\nmodule.exports = { sum, findMax, removeDuplicates, flatten, chunk };\n",
        "is_test": false
      },
      {
        "path": "test_array_ops.js",
        "content": "// Tests for array operations\n\nconst { sum, findMax, removeDuplicates, flatten, chunk } = require('./array_ops');\n\nfunction assertEquals(actual, expected, message) {\n    if (JSON.stringify(actual) !== JSON.stringify(expected)) {\n        throw new Error(`${message}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);\n    }\n}\n\nfunction test_sum() {\n    assertEquals(sum([1, 2, 3, 4, 5]), 15, \"sum([1, 2, 3, 4, 5])\");\n    assertEquals(sum([]), 0, \"sum([])\");\n    console.log(\"\u2713 test_sum passed\");\n}\n\nfunction test_findMax() {\n    assertEquals(findMax([1, 5, 3, 9, 2]), 9, \"findMax([1, 5, 3, 9, 2])\");\n    assertEquals(findMax([]), null, \"findMax([])\");\n    console.log(\"\u2713 test_findMax passed\");\n}\n\nfunction test_removeDuplicates() {\n    assertEquals(removeDuplicates([1, 2, 2, 3, 1, 4]), [1, 2, 3, 4], \"removeDuplicates\");\n    console.log(\"\u2713 test_removeDuplicates passed\");\n}\n\nfunction test_flatten() {\n    assertEquals(flatten([[1, 2], [3, 4], [5]]), [1, 2, 3, 4, 5], \"flatten\");\n    console.log(\"\u2713 test_flatten passed\");\n}\n\nfunction test_chunk() {\n    assertEquals(chunk([1, 2, 3, 4, 5], 2), [[1, 2], [3, 4], [5]], \"chunk\");\n    console.log(\"\u2713 test_chunk passed\");\n}\n\n// Run all tests\ntry {\n    test_sum();\n    test_findMax();\n    test_removeDuplicates();\n    test_flatten();\n    test_chunk();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 547 Oct 30 10:00 array_ops.js",
      "-rw-r--r-- 1 user user 1435 Oct 30 10:00 test_array_ops.js",
      "$ node test_array_ops.js",
      "Test failed: ..."
    ],
    "expected_commands": 12,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_array_ops.js",
        "expected": 0,
        "description": "Tests must run successfully"
      }
    ],
    "metadata": {
      "bugs": [
        "Missing opening brace on line 3",
        "Missing opening brace on line 7",
        "Wrong arithmetic operator on line 4"
      ],
      "scenario_type": "array_ops"
    }
  },
  {
    "id": "gen_20251031_215148_0044",
    "difficulty": "medium",
    "language": "javascript",
    "task_description": "The calculator module has bugs causing test failures. There are also debug statements that need to be removed. Fix all the issues.",
    "files": [
      {
        "path": "calculator.js",
        "content": "// Module with bugs\n\nfunction calculate(a, b) {\n    // BUG: Wrong operator\n    return a - b;  // Should be a + b\n}\n\nfunction multiply(x, y) {\n    // BUG: Wrong operator\n    return x + y;  // Should be x * y\n}\n\n// DEBUG\nconsole.log(\"DEBUG: Loading\");\n\nmodule.exports = { calculate, multiply };\n",
        "is_test": false
      },
      {
        "path": "test_calculator.js",
        "content": "const { calculate, multiply } = require('./calculator');\n\nif (calculate(5, 3) !== 8) throw new Error(\"calculate failed\");\nif (multiply(4, 5) !== 20) throw new Error(\"multiply failed\");\nconsole.log(\"\u2713 All tests passed\");\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "ls",
      "cat calculator.*"
    ],
    "expected_commands": 5,
    "verification_rules": [
      {
        "type": "test",
        "target": "test_calculator.js",
        "expected": null,
        "description": "Tests must pass"
      }
    ],
    "metadata": {
      "scenario_type": "sed_intensive",
      "command_focus": "sed",
      "solution_steps": [
        "Fix subtract to add: sed -i 's/a - b/a + b/g' calculator file",
        "Fix add to multiply: sed -i 's/x + y/x * y/g' calculator file",
        "Remove debug lines: sed -i '/DEBUG/d' calculator file",
        "Add zero check for divide (Python): sed -i '/return a / b/i\\    if b == 0: raise ValueError(...)' calculator.py",
        "Run tests to verify all fixes"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0055",
    "difficulty": "medium",
    "language": "python",
    "task_description": "Reorganize the project structure by moving utils.py into a new 'lib' directory and updating imports accordingly. Make sure the code still runs after the reorganization.",
    "files": [
      {
        "path": "utils.py",
        "content": "def utility_function():\n    return \"util\"\n",
        "is_test": false
      },
      {
        "path": "main.py",
        "content": "from utils import utility_function\n\ndef main():\n    print(utility_function())\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "ls",
      "tree ."
    ],
    "expected_commands": 8,
    "verification_rules": [
      {
        "type": "execution",
        "target": "main.py",
        "expected": null,
        "description": "Code should run"
      }
    ],
    "metadata": {
      "scenario_type": "file_ops",
      "command_focus": "cp,mv,mkdir",
      "solution_steps": [
        "Create directory: mkdir lib",
        "Copy file: cp utils.py lib/utils.py",
        "Update import: sed -i 's/from utils/from lib.utils/g' main.py",
        "Make package: touch lib/__init__.py",
        "Verify structure: ls lib/",
        "Check import: cat main.py | grep import",
        "Test execution: python main.py"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0090",
    "difficulty": "easy",
    "language": "javascript",
    "task_description": "Fix the broken javascript code. The issue is straightforward - locate the problem and fix it. Files: array_ops.js, test_array_ops.js",
    "files": [
      {
        "path": "array_ops.js",
        "content": "// Array operation functions\n\nfunction sum(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n\nfunction findMax(arr) {\n    if (arr.length !== 0) return null;\n    return Math.max(...arr);\n}\n\nfunction removeDuplicates(arr) {\n    return [...new Set(arr)];\n}\n\nfunction flatten(arr) {\n    return arr.flat();\n}\n\nfunction chunk(arr, size) {\n    const result = [];\n    for (let i = 0; i < arr.length; i += size) {\n        result.push(arr.slice(i, i + size));\n    }\n    return result;\n}\n\nmodule.exports = { sum, findMax, removeDuplicates, flatten, chunk };\n",
        "is_test": false
      },
      {
        "path": "test_array_ops.js",
        "content": "// Tests for array operations\n\nconst { sum, findMax, removeDuplicates, flatten, chunk } = require('./array_ops');\n\nfunction assertEquals(actual, expected, message) {\n    if (JSON.stringify(actual) !== JSON.stringify(expected)) {\n        throw new Error(`${message}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);\n    }\n}\n\nfunction test_sum() {\n    assertEquals(sum([1, 2, 3, 4, 5]), 15, \"sum([1, 2, 3, 4, 5])\");\n    assertEquals(sum([]), 0, \"sum([])\");\n    console.log(\"\u2713 test_sum passed\");\n}\n\nfunction test_findMax() {\n    assertEquals(findMax([1, 5, 3, 9, 2]), 9, \"findMax([1, 5, 3, 9, 2])\");\n    assertEquals(findMax([]), null, \"findMax([])\");\n    console.log(\"\u2713 test_findMax passed\");\n}\n\nfunction test_removeDuplicates() {\n    assertEquals(removeDuplicates([1, 2, 2, 3, 1, 4]), [1, 2, 3, 4], \"removeDuplicates\");\n    console.log(\"\u2713 test_removeDuplicates passed\");\n}\n\nfunction test_flatten() {\n    assertEquals(flatten([[1, 2], [3, 4], [5]]), [1, 2, 3, 4, 5], \"flatten\");\n    console.log(\"\u2713 test_flatten passed\");\n}\n\nfunction test_chunk() {\n    assertEquals(chunk([1, 2, 3, 4, 5], 2), [[1, 2], [3, 4], [5]], \"chunk\");\n    console.log(\"\u2713 test_chunk passed\");\n}\n\n// Run all tests\ntry {\n    test_sum();\n    test_findMax();\n    test_removeDuplicates();\n    test_flatten();\n    test_chunk();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls",
      "array_ops.js test_array_ops.js"
    ],
    "expected_commands": 3,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_array_ops.js",
        "expected": 0,
        "description": "Tests must run successfully"
      }
    ],
    "metadata": {
      "bugs": [
        "Wrong comparison operator on line 8"
      ],
      "scenario_type": "array_ops"
    }
  },
  {
    "id": "gen_20251031_215148_0021",
    "difficulty": "easy",
    "language": "javascript",
    "task_description": "The code has issues that prevent it from working correctly. The issue is straightforward - locate the problem and fix it. Files: validators.js, test_validators.js",
    "files": [
      {
        "path": "validators.js",
        "content": "// Validation functions\n\nfunction isValidEmail(email) \n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return regex.test(email);\n}\n\nfunction isValidPhone(phone) {\n    const regex = /^\\d{3}-\\d{3}-\\d{4}$/;\n    return regex.test(phone);\n}\n\nfunction isValidPassword(password) {\n    return password.length >= 8;\n}\n\nfunction isValidUsername(username) {\n    const regex = /^[a-zA-Z0-9_]{3,20}$/;\n    return regex.test(username);\n}\n\nmodule.exports = { isValidEmail, isValidPhone, isValidPassword, isValidUsername };\n",
        "is_test": false
      },
      {
        "path": "test_validators.js",
        "content": "// Tests for validators\n\nconst { isValidEmail, isValidPhone, isValidPassword, isValidUsername } = require('./validators');\n\nfunction assertEquals(actual, expected, message) {\n    if (actual !== expected) {\n        throw new Error(`${message}: expected ${expected}, got ${actual}`);\n    }\n}\n\nfunction test_isValidEmail() {\n    assertEquals(isValidEmail(\"user@example.com\"), true, \"valid email\");\n    assertEquals(isValidEmail(\"invalid\"), false, \"invalid email\");\n    console.log(\"\u2713 test_isValidEmail passed\");\n}\n\nfunction test_isValidPhone() {\n    assertEquals(isValidPhone(\"123-456-7890\"), true, \"valid phone\");\n    assertEquals(isValidPhone(\"1234567890\"), false, \"invalid phone\");\n    console.log(\"\u2713 test_isValidPhone passed\");\n}\n\nfunction test_isValidPassword() {\n    assertEquals(isValidPassword(\"password123\"), true, \"valid password\");\n    assertEquals(isValidPassword(\"short\"), false, \"invalid password\");\n    console.log(\"\u2713 test_isValidPassword passed\");\n}\n\nfunction test_isValidUsername() {\n    assertEquals(isValidUsername(\"user_123\"), true, \"valid username\");\n    assertEquals(isValidUsername(\"ab\"), false, \"too short username\");\n    console.log(\"\u2713 test_isValidUsername passed\");\n}\n\n// Run all tests\ntry {\n    test_isValidEmail();\n    test_isValidPhone();\n    test_isValidPassword();\n    test_isValidUsername();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls",
      "validators.js test_validators.js"
    ],
    "expected_commands": 3,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_validators.js",
        "expected": 0,
        "description": "Tests must run successfully"
      }
    ],
    "metadata": {
      "bugs": [
        "Missing opening brace on line 3"
      ],
      "scenario_type": "validators"
    }
  },
  {
    "id": "gen_20251031_215148_0104",
    "difficulty": "hard",
    "language": "python",
    "task_description": "Create a compressed backup archive named 'backup.tar.gz' containing all Python files in the 'src' directory and the config.ini file. Then verify the archive contents.",
    "files": [
      {
        "path": "src/main.py",
        "content": "def main():\n    print(\"File 1\")\n",
        "is_test": false
      },
      {
        "path": "src/helper.py",
        "content": "def helper():\n    return \"Helper\"\n",
        "is_test": false
      },
      {
        "path": "config.ini",
        "content": "[settings]\ndebug=true\nport=8000\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "ls",
      "ls src/"
    ],
    "expected_commands": 6,
    "verification_rules": [
      {
        "type": "text_match",
        "target": ".",
        "expected": "backup.tar.gz",
        "description": "Archive created"
      }
    ],
    "metadata": {
      "scenario_type": "archive",
      "command_focus": "tar,gzip,find",
      "solution_steps": [
        "List files: ls -R",
        "Create archive: tar -czf backup.tar.gz src/ config.ini",
        "Or find and archive: find . -name '*.py' -o -name '*.ini' | tar -czf backup.tar.gz -T -",
        "List archive contents: tar -tzf backup.tar.gz",
        "Verify: ls -lh backup.tar.gz",
        "Extract to test (optional): tar -xzf backup.tar.gz -C /tmp/test"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0098",
    "difficulty": "easy",
    "language": "python",
    "task_description": "Process the access log to create 'top_ips.txt' containing the top 3 IP addresses by request count, sorted by frequency. Each line should show the count and IP address.",
    "files": [
      {
        "path": "access.log",
        "content": "192.168.1.10 - - [30/Oct/2024:10:15:23] \"GET /api/users HTTP/1.1\" 200 1234\n192.168.1.11 - - [30/Oct/2024:10:15:24] \"POST /api/login HTTP/1.1\" 200 567\n192.168.1.10 - - [30/Oct/2024:10:15:25] \"GET /api/profile HTTP/1.1\" 200 890\n192.168.1.12 - - [30/Oct/2024:10:15:26] \"GET /api/users HTTP/1.1\" 200 1234\n192.168.1.11 - - [30/Oct/2024:10:15:27] \"DELETE /api/session HTTP/1.1\" 204 0\n192.168.1.10 - - [30/Oct/2024:10:15:28] \"GET /api/users HTTP/1.1\" 200 1234\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "head access.log"
    ],
    "expected_commands": 10,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "top_ips.txt",
        "expected": "192.168",
        "description": "Top IPs listed"
      }
    ],
    "metadata": {
      "scenario_type": "data_pipeline",
      "command_focus": "cut,sort,uniq,head,pipes",
      "solution_steps": [
        "View log: cat access.log",
        "Extract IPs: cut -d' ' -f1 access.log",
        "Sort IPs: cut -d' ' -f1 access.log | sort",
        "Count occurrences: cut -d' ' -f1 access.log | sort | uniq -c",
        "Sort by count: cut -d' ' -f1 access.log | sort | uniq -c | sort -rn",
        "Get top 3: cut -d' ' -f1 access.log | sort | uniq -c | sort -rn | head -3",
        "Save to file: cut -d' ' -f1 access.log | sort | uniq -c | sort -rn | head -3 > top_ips.txt",
        "Verify: cat top_ips.txt"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0002",
    "difficulty": "easy",
    "language": "python",
    "task_description": "Create a symbolic link named 'config.ini' that points to 'config.dev.ini'. Then verify the link works by running the app and checking that it uses the dev configuration.",
    "files": [
      {
        "path": "config.dev.ini",
        "content": "[database]\nhost=localhost\nport=5432\nname=dev_db\n",
        "is_test": false
      },
      {
        "path": "config.prod.ini",
        "content": "[database]\nhost=prod.server.com\nport=5432\nname=prod_db\n",
        "is_test": false
      },
      {
        "path": "app.py",
        "content": "import configparser\n\nconfig = configparser.ConfigParser()\nconfig.read('config.ini')  # Reads the symlink\n\nprint(f\"Database: {config['database']['name']}\")\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "ls *.ini"
    ],
    "expected_commands": 6,
    "verification_rules": [
      {
        "type": "execution",
        "target": "app.py",
        "expected": null,
        "description": "App runs successfully"
      }
    ],
    "metadata": {
      "scenario_type": "symlinks",
      "command_focus": "ln,readlink,ls",
      "solution_steps": [
        "Create symlink: ln -s config.dev.ini config.ini",
        "Verify link: ls -l config.ini",
        "Check target: readlink config.ini",
        "Test app: python3 app.py",
        "Switch to prod: rm config.ini && ln -s config.prod.ini config.ini",
        "Verify switch: readlink config.ini"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0072",
    "difficulty": "medium",
    "language": "javascript",
    "task_description": "Fix the broken javascript code. You'll need to explore the codebase to find the issue. Check the test failures for clues. Project structure: utils.js, test_utils.js",
    "files": [
      {
        "path": "utils.js",
        "content": "// Utility functions\n\nfunction add(a, b) \n    return a + b;\n}\n\nfunction multiply(a, b) {\n    return a * b;\n}\n\nfunction isEven(n) {\n    return n % 2 !== 0;\n}\n\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction range(start, end) {\n    const result = [];\n    for (let i = start; i <= end; i++) {\n        result.push(i);\n    }\n    return result;\n}\n\nmodule.exports = { add, multiply, isEven, capitalize, range };\n",
        "is_test": false
      },
      {
        "path": "test_utils.js",
        "content": "// Tests for utility functions\n\nconst { add, multiply, isEven, capitalize, range } = require('./utils');\n\nfunction assertEquals(actual, expected, message) {\n    if (JSON.stringify(actual) !== JSON.stringify(expected)) {\n        throw new Error(`${message}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);\n    }\n}\n\nfunction test_add() {\n    assertEquals(add(2, 3), 5, \"add(2, 3)\");\n    assertEquals(add(-1, 1), 0, \"add(-1, 1)\");\n    console.log(\"\u2713 test_add passed\");\n}\n\nfunction test_multiply() {\n    assertEquals(multiply(4, 5), 20, \"multiply(4, 5)\");\n    assertEquals(multiply(-2, 3), -6, \"multiply(-2, 3)\");\n    console.log(\"\u2713 test_multiply passed\");\n}\n\nfunction test_isEven() {\n    assertEquals(isEven(4), true, \"isEven(4)\");\n    assertEquals(isEven(5), false, \"isEven(5)\");\n    console.log(\"\u2713 test_isEven passed\");\n}\n\nfunction test_capitalize() {\n    assertEquals(capitalize(\"hello\"), \"Hello\", \"capitalize('hello')\");\n    assertEquals(capitalize(\"world\"), \"World\", \"capitalize('world')\");\n    console.log(\"\u2713 test_capitalize passed\");\n}\n\nfunction test_range() {\n    assertEquals(range(1, 5), [1, 2, 3, 4, 5], \"range(1, 5)\");\n    assertEquals(range(0, 0), [0], \"range(0, 0)\");\n    console.log(\"\u2713 test_range passed\");\n}\n\n// Run all tests\ntry {\n    test_add();\n    test_multiply();\n    test_isEven();\n    test_capitalize();\n    test_range();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 451 Oct 30 10:00 utils.js",
      "-rw-r--r-- 1 user user 1486 Oct 30 10:00 test_utils.js"
    ],
    "expected_commands": 6,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_utils.js",
        "expected": 0,
        "description": "Tests must run successfully (exit code 0)"
      }
    ],
    "metadata": {
      "bugs": [
        "Missing opening brace on line 3",
        "Wrong comparison operator on line 12"
      ],
      "scenario_type": "utils"
    }
  },
  {
    "id": "gen_20251031_215148_0115",
    "difficulty": "hard",
    "language": "python",
    "task_description": "Fix the broken python code. Multiple issues may need to be resolved. Carefully examine the test output and trace through the code. The project has these files: calculator.py, test_calculator.py",
    "files": [
      {
        "path": "calculator.py",
        "content": "\"\"\"Simple calculator module.\"\"\"\n\ndef add(a, b)\n    \"\"\"Add two numbers.\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"Subtract b from a.\"\"\"\n    return a - b\n\ndef multiply(a, b):\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\ndef divide(a, b):\n    \"\"\"Divide a by b.\"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\ndef power(a, b):\n    \"\"\"Calculate a to the power of b.\"\"\"\n    return a ** b\n",
        "is_test": false
      },
      {
        "path": "test_calculator.py",
        "content": "\"\"\"Tests for calculator module.\"\"\"\n\nimport pytest\nfrom calculator import add, subtract, multiply, divide, power\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n    assert add(0, 0) == 0\n\ndef test_subtract():\n    assert subtract(5, 3) == 2\n    assert subtract(0, 5) == -5\n\ndef test_multiply():\n    assert multiply(4, 5) == 20\n    assert multiply(-2, 3) == -6\n\ndef test_divide():\n    assert divide(10, 2) == 5\n    assert divide(7, 2) == 3.5\n    with pytest.raises(ValueError):\n        divide(5, 0)\n\ndef test_power():\n    assert power(2, 3) == 8\n    assert power(5, 0) == 1\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 431 Oct 30 10:00 calculator.py",
      "-rw-r--r-- 1 user user 593 Oct 30 10:00 test_calculator.py",
      "$ pytest -v",
      "test_*.py::test_* FAILED",
      "Some tests are failing..."
    ],
    "expected_commands": 9,
    "verification_rules": [
      {
        "type": "test",
        "target": "test_calculator.py",
        "expected": null,
        "description": "All calculator tests must pass"
      },
      {
        "type": "lint",
        "target": "calculator.py",
        "expected": null,
        "description": "Code must pass basic linting"
      }
    ],
    "metadata": {
      "bugs": [
        "Missing colon on line 3"
      ],
      "scenario_type": "calculator"
    }
  },
  {
    "id": "gen_20251031_215148_0057",
    "difficulty": "hard",
    "language": "python",
    "task_description": "Find all Python files (*.py) in the project, excluding the 'tests' directory, and create a 'python_files.txt' listing with their full paths. Also create 'file_count.txt' with the total count.",
    "files": [
      {
        "path": "src/main.py",
        "content": "# Main module\nprint('main')",
        "is_test": false
      },
      {
        "path": "src/utils.py",
        "content": "# Utils\ndef helper(): pass",
        "is_test": false
      },
      {
        "path": "tests/test_main.py",
        "content": "# Tests\nimport main",
        "is_test": false
      },
      {
        "path": "tests/test_utils.py",
        "content": "# Tests\nimport utils",
        "is_test": false
      },
      {
        "path": "docs/README.md",
        "content": "# Documentation",
        "is_test": false
      },
      {
        "path": "docs/API.md",
        "content": "# API Docs",
        "is_test": false
      },
      {
        "path": ".gitignore",
        "content": "*.pyc\n__pycache__/",
        "is_test": false
      },
      {
        "path": "setup.py",
        "content": "from setuptools import setup",
        "is_test": false
      }
    ],
    "cli_history": [
      "ls",
      "tree ."
    ],
    "expected_commands": 8,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "python_files.txt",
        "expected": "src/",
        "description": "Python files listed"
      }
    ],
    "metadata": {
      "scenario_type": "directory_tree",
      "command_focus": "find,wc,grep",
      "solution_steps": [
        "List all directories: find . -type d",
        "Find all .py files: find . -name '*.py'",
        "Exclude tests: find . -name '*.py' -not -path './tests/*'",
        "Save to file: find . -name '*.py' -not -path './tests/*' > python_files.txt",
        "Count files: find . -name '*.py' -not -path './tests/*' | wc -l",
        "Save count: find . -name '*.py' -not -path './tests/*' | wc -l > file_count.txt",
        "Verify list: cat python_files.txt",
        "Verify count: cat file_count.txt"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0108",
    "difficulty": "easy",
    "language": "python",
    "task_description": "The python project has failing tests. The issue is straightforward - locate the problem and fix it. Files: calculator.py, test_calculator.py",
    "files": [
      {
        "path": "calculator.py",
        "content": "\"\"\"Simple calculator module.\"\"\"\n\ndef add(a, b):\n    \"\"\"Add two numbers.\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"Subtract b from a.\"\"\"\n    return a - b\n\ndef multiply(a, b):\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\ndef divide(a, b):\n    \"\"\"Divide a by b.\"\"\"\n    if b != 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\ndef power(a, b):\n    \"\"\"Calculate a to the power of b.\"\"\"\n    return a ** b\n",
        "is_test": false
      },
      {
        "path": "test_calculator.py",
        "content": "\"\"\"Tests for calculator module.\"\"\"\n\nimport pytest\nfrom calculator import add, subtract, multiply, divide, power\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n    assert add(0, 0) == 0\n\ndef test_subtract():\n    assert subtract(5, 3) == 2\n    assert subtract(0, 5) == -5\n\ndef test_multiply():\n    assert multiply(4, 5) == 20\n    assert multiply(-2, 3) == -6\n\ndef test_divide():\n    assert divide(10, 2) == 5\n    assert divide(7, 2) == 3.5\n    with pytest.raises(ValueError):\n        divide(5, 0)\n\ndef test_power():\n    assert power(2, 3) == 8\n    assert power(5, 0) == 1\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls",
      "calculator.py test_calculator.py"
    ],
    "expected_commands": 3,
    "verification_rules": [
      {
        "type": "test",
        "target": "test_calculator.py",
        "expected": null,
        "description": "All calculator tests must pass"
      },
      {
        "type": "lint",
        "target": "calculator.py",
        "expected": null,
        "description": "Code must pass basic linting"
      }
    ],
    "metadata": {
      "bugs": [
        "Wrong comparison operator on line 17"
      ],
      "scenario_type": "calculator"
    }
  },
  {
    "id": "gen_20251031_215148_0051",
    "difficulty": "easy",
    "language": "python",
    "task_description": "The code has issues that prevent it from working correctly. The issue is straightforward - locate the problem and fix it. Files: calculator.py, test_calculator.py",
    "files": [
      {
        "path": "calculator.py",
        "content": "\"\"\"Simple calculator module.\"\"\"\n\ndef add(a, b):\n    \"\"\"Add two numbers.\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"Subtract b from a.\"\"\"\n    return a - b\n\ndef multiply(a, b):\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\ndef divide(a, b):\n    \"\"\"Divide a by b.\"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n\ndef power(a, b):\n    \"\"\"Calculate a to the power of b.\"\"\"\n    return a ** b\n",
        "is_test": false
      },
      {
        "path": "test_calculator.py",
        "content": "\"\"\"Tests for calculator module.\"\"\"\n\nimport pytest\nfrom calculator import add, subtract, multiply, divide, power\n\ndef test_add():\n    assert add(2, 3) == 5\n    assert add(-1, 1) == 0\n    assert add(0, 0) == 0\n\ndef test_subtract():\n    assert subtract(5, 3) == 2\n    assert subtract(0, 5) == -5\n\ndef test_multiply():\n    assert multiply(4, 5) == 20\n    assert multiply(-2, 3) == -6\n\ndef test_divide():\n    assert divide(10, 2) == 5\n    assert divide(7, 2) == 3.5\n    with pytest.raises(ValueError):\n        divide(5, 0)\n\ndef test_power():\n    assert power(2, 3) == 8\n    assert power(5, 0) == 1\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls",
      "calculator.py test_calculator.py"
    ],
    "expected_commands": 3,
    "verification_rules": [
      {
        "type": "test",
        "target": "test_calculator.py",
        "expected": null,
        "description": "All calculator tests must pass"
      },
      {
        "type": "lint",
        "target": "calculator.py",
        "expected": null,
        "description": "Code must pass basic linting"
      }
    ],
    "metadata": {
      "bugs": [],
      "scenario_type": "calculator"
    }
  },
  {
    "id": "gen_20251031_215148_0149",
    "difficulty": "very_hard",
    "language": "python",
    "task_description": "Create a compressed backup archive named 'backup.tar.gz' containing all Python files in the 'src' directory and the config.ini file. Then verify the archive contents.",
    "files": [
      {
        "path": "src/main.py",
        "content": "def main():\n    print(\"File 1\")\n",
        "is_test": false
      },
      {
        "path": "src/helper.py",
        "content": "def helper():\n    return \"Helper\"\n",
        "is_test": false
      },
      {
        "path": "config.ini",
        "content": "[settings]\ndebug=true\nport=8000\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "ls",
      "ls src/"
    ],
    "expected_commands": 6,
    "verification_rules": [
      {
        "type": "text_match",
        "target": ".",
        "expected": "backup.tar.gz",
        "description": "Archive created"
      }
    ],
    "metadata": {
      "scenario_type": "archive",
      "command_focus": "tar,gzip,find",
      "solution_steps": [
        "List files: ls -R",
        "Create archive: tar -czf backup.tar.gz src/ config.ini",
        "Or find and archive: find . -name '*.py' -o -name '*.ini' | tar -czf backup.tar.gz -T -",
        "List archive contents: tar -tzf backup.tar.gz",
        "Verify: ls -lh backup.tar.gz",
        "Extract to test (optional): tar -xzf backup.tar.gz -C /tmp/test"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0130",
    "difficulty": "easy",
    "language": "python",
    "task_description": "Reorganize the project structure by moving utils.py into a new 'lib' directory and updating imports accordingly. Make sure the code still runs after the reorganization.",
    "files": [
      {
        "path": "utils.py",
        "content": "def utility_function():\n    return \"util\"\n",
        "is_test": false
      },
      {
        "path": "main.py",
        "content": "from utils import utility_function\n\ndef main():\n    print(utility_function())\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "ls",
      "tree ."
    ],
    "expected_commands": 8,
    "verification_rules": [
      {
        "type": "execution",
        "target": "main.py",
        "expected": null,
        "description": "Code should run"
      }
    ],
    "metadata": {
      "scenario_type": "file_ops",
      "command_focus": "cp,mv,mkdir",
      "solution_steps": [
        "Create directory: mkdir lib",
        "Copy file: cp utils.py lib/utils.py",
        "Update import: sed -i 's/from utils/from lib.utils/g' main.py",
        "Make package: touch lib/__init__.py",
        "Verify structure: ls lib/",
        "Check import: cat main.py | grep import",
        "Test execution: python main.py"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0060",
    "difficulty": "medium",
    "language": "python",
    "task_description": "The text processor has a bug - it's treating words with different cases as different words (e.g., 'apple' and 'Apple'). Fix the code to handle case-insensitive processing.",
    "files": [
      {
        "path": "words.txt",
        "content": "apple\nbanana\napple\nCherry\nbanana\nApple\n",
        "is_test": false
      },
      {
        "path": "processor.py",
        "content": "def process():\n    # BUG: Case-sensitive duplicates\n    with open('words.txt') as f:\n        return list(set(f.read().split()))\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "cat words.txt"
    ],
    "expected_commands": 7,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "processor.py",
        "expected": "lower()",
        "description": "Uses lowercase"
      }
    ],
    "metadata": {
      "scenario_type": "text_transform",
      "command_focus": "tr,sort,uniq",
      "solution_steps": [
        "View file: cat words.txt",
        "Convert to lowercase: cat words.txt | tr 'A-Z' 'a-z'",
        "Sort: cat words.txt | tr 'A-Z' 'a-z' | sort",
        "Get unique: cat words.txt | tr 'A-Z' 'a-z' | sort | uniq",
        "Count unique: cat words.txt | tr 'A-Z' 'a-z' | sort | uniq | wc -l",
        "Identify issue: code doesn't lowercase",
        "Fix: sed -i 's/f.read().split()/f.read().lower().split()/g' processor.py"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0056",
    "difficulty": "easy",
    "language": "javascript",
    "task_description": "The code has issues that prevent it from working correctly. The issue is straightforward - locate the problem and fix it. Files: utils.js, test_utils.js",
    "files": [
      {
        "path": "utils.js",
        "content": "// Utility functions\n\nfunction add(a, b) {\n    return a + b;\n}\n\nfunction multiply(a, b) {\n    return a * b;\n}\n\nfunction isEven(n) {\n    return n % 2 === 0;\n}\n\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction range(start, end) {\n    const result = [];\n    for (let i = start; i <= end; i++) {\n        result.push(i);\n    }\n    return result;\n}\n\nmodule.exports = { add, multiply, isEven, capitalize, range };\n",
        "is_test": false
      },
      {
        "path": "test_utils.js",
        "content": "// Tests for utility functions\n\nconst { add, multiply, isEven, capitalize, range } = require('./utils');\n\nfunction assertEquals(actual, expected, message) {\n    if (JSON.stringify(actual) !== JSON.stringify(expected)) {\n        throw new Error(`${message}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);\n    }\n}\n\nfunction test_add() {\n    assertEquals(add(2, 3), 5, \"add(2, 3)\");\n    assertEquals(add(-1, 1), 0, \"add(-1, 1)\");\n    console.log(\"\u2713 test_add passed\");\n}\n\nfunction test_multiply() {\n    assertEquals(multiply(4, 5), 20, \"multiply(4, 5)\");\n    assertEquals(multiply(-2, 3), -6, \"multiply(-2, 3)\");\n    console.log(\"\u2713 test_multiply passed\");\n}\n\nfunction test_isEven() {\n    assertEquals(isEven(4), true, \"isEven(4)\");\n    assertEquals(isEven(5), false, \"isEven(5)\");\n    console.log(\"\u2713 test_isEven passed\");\n}\n\nfunction test_capitalize() {\n    assertEquals(capitalize(\"hello\"), \"Hello\", \"capitalize('hello')\");\n    assertEquals(capitalize(\"world\"), \"World\", \"capitalize('world')\");\n    console.log(\"\u2713 test_capitalize passed\");\n}\n\nfunction test_range() {\n    assertEquals(range(1, 5), [1, 2, 3, 4, 5], \"range(1, 5)\");\n    assertEquals(range(0, 0), [0], \"range(0, 0)\");\n    console.log(\"\u2713 test_range passed\");\n}\n\n// Run all tests\ntry {\n    test_add();\n    test_multiply();\n    test_isEven();\n    test_capitalize();\n    test_range();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls",
      "utils.js test_utils.js"
    ],
    "expected_commands": 3,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_utils.js",
        "expected": 0,
        "description": "Tests must run successfully (exit code 0)"
      }
    ],
    "metadata": {
      "bugs": [],
      "scenario_type": "utils"
    }
  },
  {
    "id": "gen_20251031_215148_0024",
    "difficulty": "hard",
    "language": "javascript",
    "task_description": "The javascript project has failing tests. Multiple issues may need to be resolved. Carefully examine the test output and trace through the code. The project has these files: validators.js, test_validators.js",
    "files": [
      {
        "path": "validators.js",
        "content": "// Validation functions\n\nfunction isValidEmail(email) {\n    const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return regex.test(email);\n}\n\nfunction isValidPhone(phone) {\n    const regex = /^\\d{3}-\\d{3}-\\d{4}$/;\n    return regex.test(phone);\n}\n\nfunction isValidPassword(password) {\n    return password.length >= 8;\n}\n\nfunction isValidUsername(username) {\n    const regex = /^[a-zA-Z0-9_]{3,20}$/;\n    return regex.test(username);\n}\n\nmodule.exports = { isValidEmail, isValidPhone, isValidPassword, isValidUsername };\n",
        "is_test": false
      },
      {
        "path": "test_validators.js",
        "content": "// Tests for validators\n\nconst { isValidEmail, isValidPhone, isValidPassword, isValidUsername } = require('./validators');\n\nfunction assertEquals(actual, expected, message) {\n    if (actual !== expected) {\n        throw new Error(`${message}: expected ${expected}, got ${actual}`);\n    }\n}\n\nfunction test_isValidEmail() {\n    assertEquals(isValidEmail(\"user@example.com\"), true, \"valid email\");\n    assertEquals(isValidEmail(\"invalid\"), false, \"invalid email\");\n    console.log(\"\u2713 test_isValidEmail passed\");\n}\n\nfunction test_isValidPhone() {\n    assertEquals(isValidPhone(\"123-456-7890\"), true, \"valid phone\");\n    assertEquals(isValidPhone(\"1234567890\"), false, \"invalid phone\");\n    console.log(\"\u2713 test_isValidPhone passed\");\n}\n\nfunction test_isValidPassword() {\n    assertEquals(isValidPassword(\"password123\"), true, \"valid password\");\n    assertEquals(isValidPassword(\"short\"), false, \"invalid password\");\n    console.log(\"\u2713 test_isValidPassword passed\");\n}\n\nfunction test_isValidUsername() {\n    assertEquals(isValidUsername(\"user_123\"), true, \"valid username\");\n    assertEquals(isValidUsername(\"ab\"), false, \"too short username\");\n    console.log(\"\u2713 test_isValidUsername passed\");\n}\n\n// Run all tests\ntry {\n    test_isValidEmail();\n    test_isValidPhone();\n    test_isValidPassword();\n    test_isValidUsername();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 513 Oct 30 10:00 validators.js",
      "-rw-r--r-- 1 user user 1442 Oct 30 10:00 test_validators.js",
      "$ node test_validators.js",
      "Test failed: ..."
    ],
    "expected_commands": 9,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_validators.js",
        "expected": 0,
        "description": "Tests must run successfully"
      }
    ],
    "metadata": {
      "bugs": [],
      "scenario_type": "validators"
    }
  },
  {
    "id": "gen_20251031_215148_0008",
    "difficulty": "easy",
    "language": "python",
    "task_description": "There's a bug in the python code that needs fixing. The issue is straightforward - locate the problem and fix it. Files: algorithms.py, test_algorithms.py",
    "files": [
      {
        "path": "algorithms.py",
        "content": "\"\"\"Algorithm implementations.\"\"\"\n\ndef binary_search(arr, target):\n    \"\"\"Binary search in sorted array.\"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\ndef bubble_sort(arr):\n    \"\"\"Sort array using bubble sort.\"\"\"\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\ndef fibonacci(n):\n    \"\"\"Calculate nth Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) - fibonacci(n - 2)\n\ndef factorial(n):\n    \"\"\"Calculate factorial of n.\"\"\"\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n",
        "is_test": false
      },
      {
        "path": "test_algorithms.py",
        "content": "\"\"\"Tests for algorithms.\"\"\"\n\nfrom algorithms import binary_search, bubble_sort, fibonacci, factorial\n\ndef test_binary_search():\n    assert binary_search([1, 2, 3, 4, 5], 3) == 2\n    assert binary_search([1, 2, 3, 4, 5], 6) == -1\n    assert binary_search([1], 1) == 0\n\ndef test_bubble_sort():\n    assert bubble_sort([3, 1, 4, 1, 5]) == [1, 1, 3, 4, 5]\n    assert bubble_sort([]) == []\n    assert bubble_sort([1]) == [1]\n\ndef test_fibonacci():\n    assert fibonacci(0) == 0\n    assert fibonacci(1) == 1\n    assert fibonacci(5) == 5\n    assert fibonacci(10) == 55\n\ndef test_factorial():\n    assert factorial(0) == 1\n    assert factorial(1) == 1\n    assert factorial(5) == 120\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls",
      "algorithms.py test_algorithms.py"
    ],
    "expected_commands": 3,
    "verification_rules": [
      {
        "type": "test",
        "target": "test_algorithms.py",
        "expected": null,
        "description": "All algorithm tests must pass"
      }
    ],
    "metadata": {
      "bugs": [
        "Wrong arithmetic operator on line 32"
      ],
      "scenario_type": "algorithms"
    }
  },
  {
    "id": "gen_20251031_215148_0009",
    "difficulty": "very_hard",
    "language": "javascript",
    "task_description": "There's a bug in the javascript code that needs fixing. This is a complex debugging task with multiple related issues. You'll need to understand the architecture and trace dependencies. Start by running tests to see what's failing. Files in project: utils.js, test_utils.js",
    "files": [
      {
        "path": "utils.js",
        "content": "// Utility functions\n\nfunction add(a, b) \n    return a + b;\n}\n\nfunction multiply(a, b) {\n    return a * b;\n}\n\nfunction isEven(n) {\n    return n % 2 !== 0;\n}\n\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction range(start, end) {\n    const result = [];\n    for (let i = start; i <= end; i++) {\n        result.push(i);\n    }\n    return result;\n}\n\nmodule.exports = { add, multiply, isEven, capitalize, range };\n",
        "is_test": false
      },
      {
        "path": "test_utils.js",
        "content": "// Tests for utility functions\n\nconst { add, multiply, isEven, capitalize, range } = require('./utils');\n\nfunction assertEquals(actual, expected, message) {\n    if (JSON.stringify(actual) !== JSON.stringify(expected)) {\n        throw new Error(`${message}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);\n    }\n}\n\nfunction test_add() {\n    assertEquals(add(2, 3), 5, \"add(2, 3)\");\n    assertEquals(add(-1, 1), 0, \"add(-1, 1)\");\n    console.log(\"\u2713 test_add passed\");\n}\n\nfunction test_multiply() {\n    assertEquals(multiply(4, 5), 20, \"multiply(4, 5)\");\n    assertEquals(multiply(-2, 3), -6, \"multiply(-2, 3)\");\n    console.log(\"\u2713 test_multiply passed\");\n}\n\nfunction test_isEven() {\n    assertEquals(isEven(4), true, \"isEven(4)\");\n    assertEquals(isEven(5), false, \"isEven(5)\");\n    console.log(\"\u2713 test_isEven passed\");\n}\n\nfunction test_capitalize() {\n    assertEquals(capitalize(\"hello\"), \"Hello\", \"capitalize('hello')\");\n    assertEquals(capitalize(\"world\"), \"World\", \"capitalize('world')\");\n    console.log(\"\u2713 test_capitalize passed\");\n}\n\nfunction test_range() {\n    assertEquals(range(1, 5), [1, 2, 3, 4, 5], \"range(1, 5)\");\n    assertEquals(range(0, 0), [0], \"range(0, 0)\");\n    console.log(\"\u2713 test_range passed\");\n}\n\n// Run all tests\ntry {\n    test_add();\n    test_multiply();\n    test_isEven();\n    test_capitalize();\n    test_range();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 451 Oct 30 10:00 utils.js",
      "-rw-r--r-- 1 user user 1486 Oct 30 10:00 test_utils.js",
      "$ node test_utils.js",
      "Test failed: ..."
    ],
    "expected_commands": 12,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_utils.js",
        "expected": 0,
        "description": "Tests must run successfully (exit code 0)"
      }
    ],
    "metadata": {
      "bugs": [
        "Wrong comparison operator on line 12",
        "Missing opening brace on line 3"
      ],
      "scenario_type": "utils"
    }
  },
  {
    "id": "gen_20251031_215148_0109",
    "difficulty": "medium",
    "language": "javascript",
    "task_description": "There's a bug in the javascript code that needs fixing. You'll need to explore the codebase to find the issue. Check the test failures for clues. Project structure: utils.js, test_utils.js",
    "files": [
      {
        "path": "utils.js",
        "content": "// Utility functions\n\nfunction add(a, b) {\n    return a - b;\n}\n\nfunction multiply(a, b) {\n    return a * b;\n}\n\nfunction isEven(n) {\n    return n % 2 !== 0;\n}\n\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction range(start, end) {\n    const result = [];\n    for (let i = start; i <= end; i++) {\n        result.push(i);\n    }\n    return result;\n}\n\nmodule.exports = { add, multiply, isEven, capitalize, range };\n",
        "is_test": false
      },
      {
        "path": "test_utils.js",
        "content": "// Tests for utility functions\n\nconst { add, multiply, isEven, capitalize, range } = require('./utils');\n\nfunction assertEquals(actual, expected, message) {\n    if (JSON.stringify(actual) !== JSON.stringify(expected)) {\n        throw new Error(`${message}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);\n    }\n}\n\nfunction test_add() {\n    assertEquals(add(2, 3), 5, \"add(2, 3)\");\n    assertEquals(add(-1, 1), 0, \"add(-1, 1)\");\n    console.log(\"\u2713 test_add passed\");\n}\n\nfunction test_multiply() {\n    assertEquals(multiply(4, 5), 20, \"multiply(4, 5)\");\n    assertEquals(multiply(-2, 3), -6, \"multiply(-2, 3)\");\n    console.log(\"\u2713 test_multiply passed\");\n}\n\nfunction test_isEven() {\n    assertEquals(isEven(4), true, \"isEven(4)\");\n    assertEquals(isEven(5), false, \"isEven(5)\");\n    console.log(\"\u2713 test_isEven passed\");\n}\n\nfunction test_capitalize() {\n    assertEquals(capitalize(\"hello\"), \"Hello\", \"capitalize('hello')\");\n    assertEquals(capitalize(\"world\"), \"World\", \"capitalize('world')\");\n    console.log(\"\u2713 test_capitalize passed\");\n}\n\nfunction test_range() {\n    assertEquals(range(1, 5), [1, 2, 3, 4, 5], \"range(1, 5)\");\n    assertEquals(range(0, 0), [0], \"range(0, 0)\");\n    console.log(\"\u2713 test_range passed\");\n}\n\n// Run all tests\ntry {\n    test_add();\n    test_multiply();\n    test_isEven();\n    test_capitalize();\n    test_range();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 452 Oct 30 10:00 utils.js",
      "-rw-r--r-- 1 user user 1486 Oct 30 10:00 test_utils.js"
    ],
    "expected_commands": 6,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_utils.js",
        "expected": 0,
        "description": "Tests must run successfully (exit code 0)"
      }
    ],
    "metadata": {
      "bugs": [
        "Wrong comparison operator on line 12",
        "Wrong arithmetic operator on line 4"
      ],
      "scenario_type": "utils"
    }
  },
  {
    "id": "gen_20251031_215148_0023",
    "difficulty": "hard",
    "language": "python",
    "task_description": "Update the configuration file: enable DEBUG mode, change LOG_LEVEL to 'debug', enable CACHE, update API_KEY to 'new_key_67890', and add a comment '# Updated for development' at the top.",
    "files": [
      {
        "path": "config.env",
        "content": "# Application Configuration\nDEBUG=false\nLOG_LEVEL=info\nDATABASE_HOST=localhost\nDATABASE_PORT=5432\n# API Configuration\nAPI_KEY=old_key_12345\nAPI_TIMEOUT=30\n# Cache Settings\nCACHE_ENABLED=false\nCACHE_TTL=3600\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "cat config.env"
    ],
    "expected_commands": 8,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "config.env",
        "expected": "DEBUG=true",
        "description": "DEBUG enabled"
      },
      {
        "type": "text_match",
        "target": "config.env",
        "expected": "new_key",
        "description": "API key updated"
      }
    ],
    "metadata": {
      "scenario_type": "config_editing",
      "command_focus": "sed,grep",
      "solution_steps": [
        "Backup: cp config.env config.env.bak",
        "Enable DEBUG: sed -i 's/DEBUG=false/DEBUG=true/g' config.env",
        "Change LOG_LEVEL: sed -i 's/LOG_LEVEL=info/LOG_LEVEL=debug/g' config.env",
        "Enable CACHE: sed -i 's/CACHE_ENABLED=false/CACHE_ENABLED=true/g' config.env",
        "Update API_KEY: sed -i 's/API_KEY=old_key_12345/API_KEY=new_key_67890/g' config.env",
        "Add comment at top: sed -i '1i# Updated for development' config.env",
        "Verify changes: cat config.env",
        "Or check specific: grep -E 'DEBUG|LOG_LEVEL|CACHE_ENABLED|API_KEY' config.env"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0140",
    "difficulty": "medium",
    "language": "python",
    "task_description": "Refactor the codebase: rename 'old_function' to 'new_function' everywhere it appears. Make sure to update it in all files where it's used.",
    "files": [
      {
        "path": "module1.py",
        "content": "def old_function():\n    return \"old\"\n",
        "is_test": false
      },
      {
        "path": "module2.py",
        "content": "from module1 import old_function\n\ndef caller():\n    return old_function()\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "ls *.py"
    ],
    "expected_commands": 6,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "module1.py",
        "expected": "new_function",
        "description": "Renamed"
      }
    ],
    "metadata": {
      "scenario_type": "refactoring",
      "command_focus": "find,xargs,sed",
      "solution_steps": [
        "Find all occurrences: grep -r 'old_function' .",
        "Find all Python files: find . -name '*.py'",
        "Rename in module1: sed -i 's/old_function/new_function/g' module1.py",
        "Rename in module2: sed -i 's/old_function/new_function/g' module2.py",
        "Or use find+xargs: find . -name '*.py' -exec sed -i 's/old_function/new_function/g' {} \\;",
        "Verify: grep -r 'new_function' ."
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0027",
    "difficulty": "easy",
    "language": "python",
    "task_description": "Process the access log to create 'top_ips.txt' containing the top 3 IP addresses by request count, sorted by frequency. Each line should show the count and IP address.",
    "files": [
      {
        "path": "access.log",
        "content": "192.168.1.10 - - [30/Oct/2024:10:15:23] \"GET /api/users HTTP/1.1\" 200 1234\n192.168.1.11 - - [30/Oct/2024:10:15:24] \"POST /api/login HTTP/1.1\" 200 567\n192.168.1.10 - - [30/Oct/2024:10:15:25] \"GET /api/profile HTTP/1.1\" 200 890\n192.168.1.12 - - [30/Oct/2024:10:15:26] \"GET /api/users HTTP/1.1\" 200 1234\n192.168.1.11 - - [30/Oct/2024:10:15:27] \"DELETE /api/session HTTP/1.1\" 204 0\n192.168.1.10 - - [30/Oct/2024:10:15:28] \"GET /api/users HTTP/1.1\" 200 1234\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "head access.log"
    ],
    "expected_commands": 10,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "top_ips.txt",
        "expected": "192.168",
        "description": "Top IPs listed"
      }
    ],
    "metadata": {
      "scenario_type": "data_pipeline",
      "command_focus": "cut,sort,uniq,head,pipes",
      "solution_steps": [
        "View log: cat access.log",
        "Extract IPs: cut -d' ' -f1 access.log",
        "Sort IPs: cut -d' ' -f1 access.log | sort",
        "Count occurrences: cut -d' ' -f1 access.log | sort | uniq -c",
        "Sort by count: cut -d' ' -f1 access.log | sort | uniq -c | sort -rn",
        "Get top 3: cut -d' ' -f1 access.log | sort | uniq -c | sort -rn | head -3",
        "Save to file: cut -d' ' -f1 access.log | sort | uniq -c | sort -rn | head -3 > top_ips.txt",
        "Verify: cat top_ips.txt"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0036",
    "difficulty": "very_hard",
    "language": "python",
    "task_description": "The text processor has a bug - it's treating words with different cases as different words (e.g., 'apple' and 'Apple'). Fix the code to handle case-insensitive processing.",
    "files": [
      {
        "path": "words.txt",
        "content": "apple\nbanana\napple\nCherry\nbanana\nApple\n",
        "is_test": false
      },
      {
        "path": "processor.py",
        "content": "def process():\n    # BUG: Case-sensitive duplicates\n    with open('words.txt') as f:\n        return list(set(f.read().split()))\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "cat words.txt"
    ],
    "expected_commands": 7,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "processor.py",
        "expected": "lower()",
        "description": "Uses lowercase"
      }
    ],
    "metadata": {
      "scenario_type": "text_transform",
      "command_focus": "tr,sort,uniq",
      "solution_steps": [
        "View file: cat words.txt",
        "Convert to lowercase: cat words.txt | tr 'A-Z' 'a-z'",
        "Sort: cat words.txt | tr 'A-Z' 'a-z' | sort",
        "Get unique: cat words.txt | tr 'A-Z' 'a-z' | sort | uniq",
        "Count unique: cat words.txt | tr 'A-Z' 'a-z' | sort | uniq | wc -l",
        "Identify issue: code doesn't lowercase",
        "Fix: sed -i 's/f.read().split()/f.read().lower().split()/g' processor.py"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0058",
    "difficulty": "easy",
    "language": "python",
    "task_description": "Analyze the web server access logs and create a summary.txt file that reports the count of errors (status codes 404 and 500). Explore the log file to understand its format first.",
    "files": [
      {
        "path": "access.log",
        "content": "192.168.1.1 - - [30/Oct/2024:10:00:00] \"GET /api/users HTTP/1.1\" 200\n192.168.1.2 - - [30/Oct/2024:10:00:01] \"POST /api/data HTTP/1.1\" 201\n192.168.1.1 - - [30/Oct/2024:10:00:05] \"GET /api/users HTTP/1.1\" 404\n192.168.1.3 - - [30/Oct/2024:10:00:10] \"GET /api/items HTTP/1.1\" 200\n192.168.1.2 - - [30/Oct/2024:10:00:15] \"DELETE /api/data HTTP/1.1\" 500\n",
        "is_test": false
      }
    ],
    "cli_history": [
      "head -3 access.log"
    ],
    "expected_commands": 8,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "summary.txt",
        "expected": "Error count",
        "description": "Summary created"
      }
    ],
    "metadata": {
      "scenario_type": "log_analysis",
      "command_focus": "awk,cut,grep,pipes",
      "solution_steps": [
        "View log: cat access.log",
        "Find errors: grep '404\\|500' access.log",
        "Extract IPs: cut -d' ' -f1 access.log | sort | uniq",
        "Count status codes: awk '{print $9}' access.log | sort | uniq -c",
        "Count GET requests: grep 'GET' access.log | wc -l",
        "Extract paths: cat access.log | cut -d'\"' -f2 | cut -d' ' -f2",
        "Create summary: echo \"Error count: $(grep -c '404\\|500' access.log)\" > summary.txt"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0063",
    "difficulty": "hard",
    "language": "python",
    "task_description": "There's a bug in the python code that needs fixing. Multiple issues may need to be resolved. Carefully examine the test output and trace through the code. The project has these files: data_processor.py, test_data_processor.py",
    "files": [
      {
        "path": "data_processor.py",
        "content": "\"\"\"Data processing utilities.\"\"\"\n\ndef filter_positive(numbers):\n    \"\"\"Filter positive numbers from a list.\"\"\"\n    return [n for n in numbers if n > 0]\n\ndef sum_even(numbers):\n    \"\"\"Sum all even numbers in a list.\"\"\"\n    return sum(n for n in numbers if n % 2 == 0)\n\ndef find_max(numbers):\n    \"\"\"Find maximum value in a list.\"\"\"\n    if not numbers:\n        return None\n    return max(numbers)\n\ndef average(numbers):\n    \"\"\"Calculate average of numbers.\"\"\"\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\ndef remove_duplicates(items):\n    \"\"\"Remove duplicates while preserving order.\"\"\"\n    seen = set()\n    result = []\n    for item in items:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n",
        "is_test": false
      },
      {
        "path": "test_data_processor.py",
        "content": "\"\"\"Tests for data processor.\"\"\"\n\nfrom data_processor import filter_positive, sum_even, find_max, average, remove_duplicates\n\ndef test_filter_positive():\n    assert filter_positive([1, -2, 3, -4, 5]) == [1, 3, 5]\n    assert filter_positive([-1, -2, -3]) == []\n    assert filter_positive([]) == []\n\ndef test_sum_even():\n    assert sum_even([1, 2, 3, 4, 5, 6]) == 12\n    assert sum_even([1, 3, 5]) == 0\n\ndef test_find_max():\n    assert find_max([1, 5, 3, 9, 2]) == 9\n    assert find_max([-5, -1, -10]) == -1\n    assert find_max([]) is None\n\ndef test_average():\n    assert average([1, 2, 3, 4, 5]) == 3.0\n    assert average([10]) == 10.0\n    assert average([]) == 0\n\ndef test_remove_duplicates():\n    assert remove_duplicates([1, 2, 2, 3, 1, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([]) == []\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 779 Oct 30 10:00 data_processor.py",
      "-rw-r--r-- 1 user user 797 Oct 30 10:00 test_data_processor.py",
      "$ pytest -v",
      "test_*.py::test_* FAILED",
      "Some tests are failing..."
    ],
    "expected_commands": 9,
    "verification_rules": [
      {
        "type": "test",
        "target": "test_data_processor.py",
        "expected": null,
        "description": "All data processor tests must pass"
      }
    ],
    "metadata": {
      "bugs": [],
      "scenario_type": "data_processor"
    }
  },
  {
    "id": "gen_20251031_215148_0071",
    "difficulty": "medium",
    "language": "javascript",
    "task_description": "The code has issues that prevent it from working correctly. You'll need to explore the codebase to find the issue. Check the test failures for clues. Project structure: utils.js, test_utils.js",
    "files": [
      {
        "path": "utils.js",
        "content": "// Utility functions\n\nfunction add(a, b) {\n    return a - b;\n}\n\nfunction multiply(a, b) {\n    return a * b;\n}\n\nfunction isEven(n) {\n    return n % 2 === 0;\n}\n\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction range(start, end) {\n    const result = [];\n    for (let i = start; i <= end; i++) {\n        result.push(i);\n    }\n    return result;\n}\n\nmodule.exports = { add, multiply, isEven, capitalize, range };\n",
        "is_test": false
      },
      {
        "path": "test_utils.js",
        "content": "// Tests for utility functions\n\nconst { add, multiply, isEven, capitalize, range } = require('./utils');\n\nfunction assertEquals(actual, expected, message) {\n    if (JSON.stringify(actual) !== JSON.stringify(expected)) {\n        throw new Error(`${message}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);\n    }\n}\n\nfunction test_add() {\n    assertEquals(add(2, 3), 5, \"add(2, 3)\");\n    assertEquals(add(-1, 1), 0, \"add(-1, 1)\");\n    console.log(\"\u2713 test_add passed\");\n}\n\nfunction test_multiply() {\n    assertEquals(multiply(4, 5), 20, \"multiply(4, 5)\");\n    assertEquals(multiply(-2, 3), -6, \"multiply(-2, 3)\");\n    console.log(\"\u2713 test_multiply passed\");\n}\n\nfunction test_isEven() {\n    assertEquals(isEven(4), true, \"isEven(4)\");\n    assertEquals(isEven(5), false, \"isEven(5)\");\n    console.log(\"\u2713 test_isEven passed\");\n}\n\nfunction test_capitalize() {\n    assertEquals(capitalize(\"hello\"), \"Hello\", \"capitalize('hello')\");\n    assertEquals(capitalize(\"world\"), \"World\", \"capitalize('world')\");\n    console.log(\"\u2713 test_capitalize passed\");\n}\n\nfunction test_range() {\n    assertEquals(range(1, 5), [1, 2, 3, 4, 5], \"range(1, 5)\");\n    assertEquals(range(0, 0), [0], \"range(0, 0)\");\n    console.log(\"\u2713 test_range passed\");\n}\n\n// Run all tests\ntry {\n    test_add();\n    test_multiply();\n    test_isEven();\n    test_capitalize();\n    test_range();\n    console.log(\"All tests passed!\");\n} catch (e) {\n    console.error(\"Test failed:\", e.message);\n    process.exit(1);\n}\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 452 Oct 30 10:00 utils.js",
      "-rw-r--r-- 1 user user 1486 Oct 30 10:00 test_utils.js"
    ],
    "expected_commands": 6,
    "verification_rules": [
      {
        "type": "execution",
        "target": "test_utils.js",
        "expected": 0,
        "description": "Tests must run successfully (exit code 0)"
      }
    ],
    "metadata": {
      "bugs": [
        "Wrong arithmetic operator on line 4"
      ],
      "scenario_type": "utils"
    }
  },
  {
    "id": "gen_20251031_215148_0007",
    "difficulty": "easy",
    "language": "python",
    "task_description": "Find all .txt files in the 'data' directory that contain 'TODO' and create a report.txt file listing the filenames and the count of TODO items in each file.",
    "files": [
      {
        "path": "data/file1.txt",
        "content": "TODO: Review this\nSome content\nFIXME: Bug here",
        "is_test": false
      },
      {
        "path": "data/file2.txt",
        "content": "Clean content\nNo issues",
        "is_test": false
      },
      {
        "path": "data/file3.txt",
        "content": "TODO: Update docs\nMore content",
        "is_test": false
      },
      {
        "path": "other/notes.txt",
        "content": "TODO: Remember this",
        "is_test": false
      }
    ],
    "cli_history": [
      "ls",
      "ls data/"
    ],
    "expected_commands": 8,
    "verification_rules": [
      {
        "type": "text_match",
        "target": "report.txt",
        "expected": "file",
        "description": "Report created"
      }
    ],
    "metadata": {
      "scenario_type": "batch_processing",
      "command_focus": "find,xargs,grep",
      "solution_steps": [
        "Find txt files in data: find data/ -name '*.txt'",
        "Search for TODO in each: find data/ -name '*.txt' -exec grep -l 'TODO' {} \\;",
        "Count TODOs per file: find data/ -name '*.txt' -exec sh -c 'echo \"{}:\" $(grep -c TODO {})' \\;",
        "Or use xargs: find data/ -name '*.txt' | xargs grep -c TODO",
        "Create report: find data/ -name '*.txt' -exec grep -c TODO {} + > report.txt",
        "Better format: find data/ -name '*.txt' -print0 | xargs -0 grep -l TODO | tee report.txt",
        "Verify: cat report.txt"
      ]
    }
  },
  {
    "id": "gen_20251031_215148_0029",
    "difficulty": "very_hard",
    "language": "python",
    "task_description": "The code has issues that prevent it from working correctly. This is a complex debugging task with multiple related issues. You'll need to understand the architecture and trace dependencies. Start by running tests to see what's failing. Files in project: data_processor.py, test_data_processor.py",
    "files": [
      {
        "path": "data_processor.py",
        "content": "\"\"\"Data processing utilities.\"\"\"\n\ndef filter_positive(numbers):\n    \"\"\"Filter positive numbers from a list.\"\"\"\n    return [n for n in numbers if n < 0]\n\ndef sum_even(numbers):\n    \"\"\"Sum all even numbers in a list.\"\"\"\n    return sum(n for n in numbers if n % 2 == 0)\n\ndef find_max(numbers):\n    \"\"\"Find maximum value in a list.\"\"\"\n    if not numbers:\n        return None\n    return max(numbers)\n\ndef average(numbers):\n    \"\"\"Calculate average of numbers.\"\"\"\n    if not numbers:\n        return 0\n    return sum(numbers) / len(numbers)\n\ndef remove_duplicates(items):\n    \"\"\"Remove duplicates while preserving order.\"\"\"\n    seen = set()\n    result = []\n    for item in items:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result\n",
        "is_test": false
      },
      {
        "path": "test_data_processor.py",
        "content": "\"\"\"Tests for data processor.\"\"\"\n\nfrom data_processor import filter_positive, sum_even, find_max, average, remove_duplicates\n\ndef test_filter_positive():\n    assert filter_positive([1, -2, 3, -4, 5]) == [1, 3, 5]\n    assert filter_positive([-1, -2, -3]) == []\n    assert filter_positive([]) == []\n\ndef test_sum_even():\n    assert sum_even([1, 2, 3, 4, 5, 6]) == 12\n    assert sum_even([1, 3, 5]) == 0\n\ndef test_find_max():\n    assert find_max([1, 5, 3, 9, 2]) == 9\n    assert find_max([-5, -1, -10]) == -1\n    assert find_max([]) is None\n\ndef test_average():\n    assert average([1, 2, 3, 4, 5]) == 3.0\n    assert average([10]) == 10.0\n    assert average([]) == 0\n\ndef test_remove_duplicates():\n    assert remove_duplicates([1, 2, 2, 3, 1, 4]) == [1, 2, 3, 4]\n    assert remove_duplicates([]) == []\n",
        "is_test": true
      }
    ],
    "cli_history": [
      "$ ls -la",
      "-rw-r--r-- 1 user user 779 Oct 30 10:00 data_processor.py",
      "-rw-r--r-- 1 user user 797 Oct 30 10:00 test_data_processor.py",
      "$ pytest -v",
      "test_*.py::test_* FAILED",
      "Some tests are failing..."
    ],
    "expected_commands": 12,
    "verification_rules": [
      {
        "type": "test",
        "target": "test_data_processor.py",
        "expected": null,
        "description": "All data processor tests must pass"
      }
    ],
    "metadata": {
      "bugs": [
        "Wrong comparison operator on line 5"
      ],
      "scenario_type": "data_processor"
    }
  }
]